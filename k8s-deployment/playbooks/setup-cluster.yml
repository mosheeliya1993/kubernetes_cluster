---
- name: Setup Kubernetes Cluster
  hosts: all
  become: yes
  vars_files:
    - ../vars/env_vars.yml

  tasks:
    - name: Set Master Node IP
      set_fact:
        master_node_ip: "{{ hostvars['master']['ansible_host'] }}"
      run_once: true

    - name: Set Worker Node IPs
      set_fact:
        worker_nodes_ips: "{{ groups['workers'] | map('extract', hostvars, 'ansible_host') | list }}"
      run_once: true

    - name: Install Kubernetes components
      apt:
        name: ['kubelet', 'kubeadm', 'kubectl']
        state: present
      notify: Restart kubelet

    - name: Check if kubelet service is active
      command: systemctl is-active kubelet
      register: kubelet_status
      failed_when: kubelet_status.stdout != 'active'


    - name: Initialize Kubernetes Master
      command: "kubeadm init --apiserver-advertise-address={{ master_node_ip }} --pod-network-cidr={{ pod_network_cidr }}"
      when: "'master' in inventory_hostname"
      notify: Restart kubelet

    - name: Check if Kubernetes API server is running
      command: kubectl get componentstatuses
      register: api_server_status
      failed_when: "'core-apiserver' not in api_server_status.stdout"


    - name: Set up kubeconfig for root user
      command: "{{ item }}"
      with_items:
        - "mkdir -p {{ kubeconfig_dir }}"
        - "cp -i /etc/kubernetes/admin.conf {{ kubeconfig_path }}"
        - "chown $(id -u):$(id -g) $HOME/.kube/config"
      when: "'master' in inventory_hostname"

    # Assuming you've pre-downloaded Flannel manifests for the air-gapped environment
    - name: Deploy Flannel CNI
      command: "kubectl apply -f {{ flannel_config_path }}"
      when: "'master' in inventory_hostname"


    - name: Check if Flannel pods are running
      command: kubectl get pods -n kube-system -l app=flannel
      register: flannel_pods_status
      failed_when: "'Running' not in flannel_pods_status.stdout"


    # Join worker nodes to the cluster
    - name: Retrieve join token
      command: "kubeadm token create --print-join-command"
      run_once: true
      delegate_to: "{{ master_node_ip }}"
      register: join_command
      when: "'master' in inventory_hostname"

    - name: Join worker node to Kubernetes cluster
      command: "{{ join_command.stdout }}"
      when: "'worker' in inventory_hostname"

    - name: Check if worker node is ready
      command: kubectl get nodes -l role=worker
      register: worker_node_status
      failed_when: "'Ready' not in worker_node_status.stdout"
  

  handlers:
    - name: Restart kubelet
      service:
        name: kubelet
        state: restarted
